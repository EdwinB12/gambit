//
// This file is part of Gambit
// Copyright (c) 1994-2024, The Gambit Project (http://www.gambit-project.org)
//
// FILE: src/tools/enumpoly/gpoly.imp
// Implementation of multivariate polynomial type
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//

#include <algorithm> // for std::max()
#include "gpoly.h"
#include "gambit.h"

//---------------------------------------------------------------
//                      gPoly
//---------------------------------------------------------------

//---------------------------
// Constructors / Destructor
//---------------------------

template <class T> gPoly<T>::gPoly(const VariableSpace *p) : Space(p) {}

template <class T> gPoly<T>::gPoly(const VariableSpace *p, const T &constant) : Space(p)
{
  if (constant != (T)0) {
    Terms.push_back(gMono<T>(p, constant));
  }
}

template <class T> gPoly<T>::gPoly(const VariableSpace *p, int var_no, int exp) : Space(p)
{
  Terms.push_back(gMono<T>((T)1, ExponentVector(p, var_no, exp)));
}

template <class T> gPoly<T>::gPoly(const VariableSpace *p, ExponentVector exps, T coeff) : Space(p)
{
  Terms.push_back(gMono<T>(coeff, exps));
}

template <class T> gPoly<T>::gPoly(const VariableSpace *p, const gMono<T> &mono) : Space(p)
{
  Terms.push_back(mono);
}

template <class T> gPoly<T>::gPoly(const gPoly<T> &p) : Space(p.Space), Terms(p.Terms)
{
  *this = p;
}

//----------------------------------
//        Operators
//----------------------------------

template <class T> gPoly<T> &gPoly<T>::operator=(const gPoly<T> &p)
{
  // assert (Space == p.Space && Order == p.Order);

  Terms = p.Terms;
  return (*this);
}

template <class T> gPoly<T> gPoly<T>::operator-() const
{
  gPoly<T> neg(*this);
  for (int j = 1; j <= Terms.size(); j++) {
    neg.Terms[j] = -Terms[j];
  }
  return neg;
}

template <class T> gPoly<T> gPoly<T>::operator-(const gPoly<T> &p) const
{
  gPoly<T> dif(*this);
  dif -= p;
  return dif;
}

template <class T> void gPoly<T>::operator-=(const gPoly<T> &p)
{
  // assert(Space == p.Space);

  gPoly<T> neg = p;
  for (int i = 1; i <= neg.Terms.size(); i++) {
    neg.Terms[i] = -neg.Terms[i];
  }
  Terms = Adder(Terms, neg.Terms);
}

template <class T> gPoly<T> gPoly<T>::operator+(const gPoly<T> &p) const
{
  gPoly<T> sum(*this);
  sum += p;
  return sum;
}

template <class T> void gPoly<T>::operator+=(const gPoly<T> &p)
{
  // assert(Space == p.Space);

  Terms = Adder(Terms, p.Terms);
}

template <class T> void gPoly<T>::operator+=(const T &val) { *this += gPoly<T>(Space, val); }

template <class T> gPoly<T> gPoly<T>::operator*(const gPoly<T> &p) const
{
  gPoly<T> prod(*this);
  prod *= p;
  return prod;
}

template <class T> gPoly<T> gPoly<T>::operator/(const T &val) const
{
  if (val == (T)0) {
    throw Gambit::ZeroDivideException();
  }
  T one = (T)1;
  return (one / val) * (*this);
}

template <class T> gPoly<T> gPoly<T>::operator/(const gPoly<T> &den) const
{
  return DivideByPolynomial(den);
}

template <class T> void gPoly<T>::operator*=(const gPoly<T> &p)
{
  // assert(Space == p.Space);

  Terms = Mult(Terms, p.Terms);
}

template <class T> void gPoly<T>::operator*=(const T &val)
{
  for (int j = 1; j <= Terms.size(); j++) {
    Terms[j] *= val;
  }
}

template <class T> bool gPoly<T>::operator==(const gPoly<T> &p) const
{
  if (Terms.size() != p.Terms.size()) {
    return false;
  }
  if (Terms.size() == 0 && p.Terms.size() == 0) {
    return true;
  }

  return (Terms == p.Terms);
}

template <class T> bool gPoly<T>::operator!=(const gPoly<T> &p) const { return !(*this == p); }

//----------------------------------
//           Information
//----------------------------------

template <class T> const VariableSpace *gPoly<T>::GetSpace() const
{
  return (VariableSpace *)Space;
}

template <class T> int gPoly<T>::Dmnsn() const { return Space->Dmnsn(); }

template <class T> int gPoly<T>::DegreeOfVar(int var_no) const
{
  int max = 0;
  for (int j = 1; j <= Terms.size(); j++) {
    if (max < Terms[j].ExpV()[var_no]) {
      max = Terms[j].ExpV()[var_no];
    }
  }
  return max;
}

template <class T> int gPoly<T>::Degree() const
{
  int max = 0;
  for (int j = 1; j <= Terms.size(); j++) {
    if (Terms[j].TotalDegree() > max) {
      max = Terms[j].TotalDegree();
    }
  }
  return max;
}

template <class T> T gPoly<T>::GetCoef(const Gambit::Vector<int> &Powers) const
{
  return GetCoef(ExponentVector(Space, Powers));
}

template <class T> T gPoly<T>::GetCoef(const ExponentVector &Powers) const
{
  for (int j = 1; j <= Terms.size(); j++) {
    if (Terms[j].ExpV() == Powers) {
      return Terms[j].Coef();
    }
  }
  return (T)0;
}

template <class T> T gPoly<T>::NumLeadCoeff() const
{
  if (Terms.size() == 1) {
    return Terms.front().Coef();
  }
  else {
    return (T)0;
  }
}

template <class T> bool gPoly<T>::IsConstant() const
{
  for (const auto &term : Terms) {
    if (!term.IsConstant()) {
      return false;
    }
  }
  return true;
}

template <class T> bool gPoly<T>::IsMultiaffine() const
{
  for (const auto &term : Terms) {
    if (!term.IsMultiaffine()) {
      return false;
    }
  }
  return true;
}

template <class T> T gPoly<T>::Evaluate(const Gambit::Vector<T> &values) const
{
  T answer = 0;
  for (const auto &term : Terms) {
    answer += term.Evaluate(values);
  }
  return answer;
}

template <class T> Gambit::List<gMono<T>> gPoly<T>::MonomialList() const { return Terms; }

//-------------------------------------------------------------
//           Private Versions of Arithmetic Operators
//-------------------------------------------------------------

template <class T>
Gambit::List<gMono<T>> gPoly<T>::Adder(const Gambit::List<gMono<T>> &One,
                                       const Gambit::List<gMono<T>> &Two) const
{
  if (One.empty()) {
    return Two;
  }
  if (Two.empty()) {
    return One;
  }

  Gambit::List<gMono<T>> answer;

  int i = 1;
  int j = 1;
  while (i <= One.size() || j <= Two.size()) {
    if (i > One.size()) {
      answer.push_back(Two[j]);
      j++;
    }
    else if (j > Two.size()) {
      answer.push_back(One[i]);
      i++;
    }
    else {
      if (One[i].ExpV() < Two[j].ExpV()) {
        answer.push_back(One[i]);
        i++;
      }
      else if (One[i].ExpV() > Two[j].ExpV()) {
        answer.push_back(Two[j]);
        j++;
      }
      else {
        if (One[i].Coef() + Two[j].Coef() != (T)0) {
          answer.push_back(One[i] + Two[j]);
        }
        i++;
        j++;
      }
    }
  }

  return answer;
}

template <class T>
Gambit::List<gMono<T>> gPoly<T>::Mult(const Gambit::List<gMono<T>> &One,
                                      const Gambit::List<gMono<T>> &Two) const
{
  Gambit::List<gMono<T>> answer;

  if (One.empty() || Two.empty()) {
    return answer;
  }

  int i;
  for (i = 1; i <= One.size(); i++) {
    for (int j = 1; j <= Two.size(); j++) {
      gMono<T> next = One[i] * Two[j];

      if (answer.empty()) {
        answer.push_back(next);
      }

      else {
        int bot = 1;
        int top = answer.size();
        if (answer[top].ExpV() < next.ExpV()) {
          answer.push_back(next);
        }
        else if (answer[bot].ExpV() > next.ExpV()) {
          answer.push_front(next);
        }
        else {
          if (answer[bot].ExpV() == next.ExpV()) {
            top = bot;
          }
          else if (answer[top].ExpV() == next.ExpV()) {
            bot = top;
          }

          while (bot < top - 1) {
            int test = bot + (top - bot) / 2;
            if (answer[test].ExpV() == next.ExpV()) {
              bot = top = test;
            }
            else if (answer[test].ExpV() < next.ExpV()) {
              bot = test;
            }
            else { // (answer[test].ExpV() > next.ExpV())
              top = test;
            }
          }

          if (bot == top) {
            answer[bot] += next;
          }
          else {
            answer.insert(std::next(answer.begin(), top - 1), next);
          }
        }
      }
    }
  }
  return answer;
}

template <class T> gPoly<T> gPoly<T>::DivideByPolynomial(const gPoly<T> &den) const
{
  gPoly<T> zero(Space, (T)0);

  if (den == zero) {
    throw Gambit::ZeroDivideException();
  }
  // assumes exact divisibility!

  gPoly<T> result = zero;

  if (*this == zero) {
    return result;
  }
  else if (den.Degree() == 0) {
    result = *this / den.NumLeadCoeff();
    return result;
  }
  else {
    int last = Dmnsn();
    while (den.DegreeOfVar(last) == 0) {
      last--;
    }

    gPoly<T> remainder = *this;

    while (remainder != zero) {
      gPoly<T> quot = remainder.LeadingCoefficient(last) / den.LeadingCoefficient(last);
      gPoly<T> power_of_last(Space, last, remainder.DegreeOfVar(last) - den.DegreeOfVar(last));
      result += quot * power_of_last;
      remainder -= quot * power_of_last * den;
    }
  }
  return result;
}

template <class T> gPoly<T> gPoly<T>::PartialDerivative(int varnumber) const
{
  gPoly<T> newPoly(*this);

  for (int i = 1; i <= newPoly.Terms.size(); i++) {
    newPoly.Terms[i] = gMono<T>(newPoly.Terms[i].Coef() * (T)newPoly.Terms[i].ExpV()[varnumber],
                                newPoly.Terms[i].ExpV().WithZeroExponent(varnumber));
  }

  int j = 1;
  while (j <= newPoly.Terms.size()) {
    if (newPoly.Terms[j].Coef() == (T)0) {
      newPoly.Terms.erase(std::next(newPoly.Terms.begin(), j - 1));
    }
    else {
      j++;
    }
  }

  return (newPoly);
}

template <class T> gPoly<T> gPoly<T>::LeadingCoefficient(int varnumber) const
{
  gPoly<T> newPoly(*this);

  int degree = DegreeOfVar(varnumber);

  newPoly.Terms = Gambit::List<gMono<T>>();
  for (int j = 1; j <= Terms.size(); j++) {
    if (Terms[j].ExpV()[varnumber] == degree) {
      newPoly.Terms.push_back(
          gMono<T>(Terms[j].Coef(), Terms[j].ExpV().WithZeroExponent(varnumber)));
    }
  }

  return (newPoly);
}

template <class T>
gPoly<T> gPoly<T>::TranslateOfMono(const gMono<T> &m, const Gambit::Vector<T> &new_origin) const
{
  gPoly<T> answer(GetSpace(), (T)1);

  for (int i = 1; i <= Dmnsn(); i++) {
    if (m.ExpV()[i] > 0) {
      gPoly<T> lt(GetSpace(), i, 1);
      lt += gPoly<T>(GetSpace(), new_origin[i]);
      for (int j = 1; j <= m.ExpV()[i]; j++) {
        answer *= lt;
      }
    }
  }

  answer *= m.Coef();

  return answer;
}

template <class T> gPoly<T> gPoly<T>::TranslateOfPoly(const Gambit::Vector<T> &new_origin) const
{
  gPoly<T> answer(GetSpace());
  for (int i = 1; i <= this->MonomialList().size(); i++) {
    answer += TranslateOfMono(this->MonomialList()[i], new_origin);
  }
  return answer;
}

template <class T>
gPoly<T> gPoly<T>::MonoInNewCoordinates(const gMono<T> &m, const Gambit::SquareMatrix<T> &M) const
{
  // assert(M.NumRows() == Dmnsn());

  gPoly<T> answer(GetSpace(), (T)1);

  for (int i = 1; i <= Dmnsn(); i++) {
    if (m.ExpV()[i] > 0) {
      gPoly<T> linearform(GetSpace(), (T)0);
      for (int j = 1; j <= Dmnsn(); j++) {
        ExponentVector exps(GetSpace(), j, 1);
        linearform += gPoly<T>(GetSpace(), exps, M(i, j));
      }
      for (int k = 1; k <= m.ExpV()[i]; k++) {
        answer *= linearform;
      }
    }
  }

  answer *= m.Coef();

  return answer;
}

template <class T> gPoly<T> gPoly<T>::PolyInNewCoordinates(const Gambit::SquareMatrix<T> &M) const
{
  gPoly<T> answer(GetSpace());
  for (int i = 1; i <= MonomialList().size(); i++) {
    answer += MonoInNewCoordinates(MonomialList()[i], M);
  }
  return answer;
}

template <class T> T gPoly<T>::MaximalValueOfNonlinearPart(const T &radius) const
{
  T maxcon = (T)0;
  for (int i = 1; i <= MonomialList().size(); i++) {
    if (MonomialList()[i].TotalDegree() > 1) {
      maxcon += MonomialList()[i].Coef() * pow(radius, MonomialList()[i].TotalDegree());
    }
  }

  return maxcon;
}

//---------------------------
//    Global Operators
//---------------------------

template <class T> gPoly<T> operator*(const T &val, const gPoly<T> &poly)
{
  gPoly<T> prod(poly);
  prod *= val;
  return prod;
}

template <class T> gPoly<T> operator*(const gPoly<T> &poly, const T &val) { return val * poly; }

template <class T> gPoly<T> operator+(const T &val, const gPoly<T> &poly)
{
  gPoly<T> prod(poly);
  prod += val;
  return prod;
}

template <class T> gPoly<T> operator+(const gPoly<T> &poly, const T &val) { return val + poly; }

//----------------------------------
//           Conversion
//----------------------------------

template <class T> gPoly<double> ToDouble(const gPoly<T> &given)
{
  gPoly<double> answer(given.GetSpace());
  Gambit::List<gMono<T>> list = given.MonomialList();
  for (int i = 1; i <= list.size(); i++) {
    auto nextcoef = (double)list[i].Coef();
    gPoly<double> next(given.GetSpace(), list[i].ExpV(), nextcoef);
    answer += next;
  }

  return answer;
}

template <class T> gPoly<double> NormalizationOfPoly(const gPoly<T> &given)
{
  Gambit::List<gMono<T>> list = given.MonomialList();
  double maxcoeff = 0.0;
  for (int i = 1; i <= list.size(); i++) {
    maxcoeff = std::max(maxcoeff, (double)Gambit::abs((double)list[i].Coef()));
  }

  if (maxcoeff < 0.000000001) {
    return ToDouble(given);
  }

  gPoly<double> answer(given.GetSpace());
  for (int i = 1; i <= list.size(); i++) {
    double nextcoef = (double)list[i].Coef() / maxcoeff;
    gPoly<double> next(given.GetSpace(), list[i].ExpV(), nextcoef);
    answer += next;
  }

  return answer;
}
