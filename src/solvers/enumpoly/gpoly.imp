//
// This file is part of Gambit
// Copyright (c) 1994-2024, The Gambit Project (http://www.gambit-project.org)
//
// FILE: src/tools/enumpoly/gpoly.imp
// Implementation of multivariate polynomial type
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//

#include <algorithm>
#include "gpoly.h"
#include "gambit.h"

//---------------------------------------------------------------
//                      gPoly
//---------------------------------------------------------------

//-------------------------------------------------------------
//           Private Versions of Arithmetic Operators
//-------------------------------------------------------------

template <class T>
List<gMono<T>> gPoly<T>::Adder(const List<gMono<T>> &One, const List<gMono<T>> &Two) const
{
  if (One.empty()) {
    return Two;
  }
  if (Two.empty()) {
    return One;
  }

  List<gMono<T>> answer;

  int i = 1;
  int j = 1;
  while (i <= One.size() || j <= Two.size()) {
    if (i > One.size()) {
      answer.push_back(Two[j]);
      j++;
    }
    else if (j > Two.size()) {
      answer.push_back(One[i]);
      i++;
    }
    else {
      if (One[i].ExpV() < Two[j].ExpV()) {
        answer.push_back(One[i]);
        i++;
      }
      else if (One[i].ExpV() > Two[j].ExpV()) {
        answer.push_back(Two[j]);
        j++;
      }
      else {
        if (One[i].Coef() + Two[j].Coef() != (T)0) {
          answer.push_back(One[i] + Two[j]);
        }
        i++;
        j++;
      }
    }
  }

  return answer;
}

template <class T>
List<gMono<T>> gPoly<T>::Mult(const List<gMono<T>> &One, const List<gMono<T>> &Two) const
{
  List<gMono<T>> answer;

  if (One.empty() || Two.empty()) {
    return answer;
  }

  for (int i = 1; i <= One.size(); i++) {
    for (int j = 1; j <= Two.size(); j++) {
      gMono<T> next = One[i] * Two[j];

      if (answer.empty()) {
        answer.push_back(next);
      }

      else {
        int bot = 1;
        int top = answer.size();
        if (answer[top].ExpV() < next.ExpV()) {
          answer.push_back(next);
        }
        else if (answer[bot].ExpV() > next.ExpV()) {
          answer.push_front(next);
        }
        else {
          if (answer[bot].ExpV() == next.ExpV()) {
            top = bot;
          }
          else if (answer[top].ExpV() == next.ExpV()) {
            bot = top;
          }

          while (bot < top - 1) {
            int test = bot + (top - bot) / 2;
            if (answer[test].ExpV() == next.ExpV()) {
              bot = top = test;
            }
            else if (answer[test].ExpV() < next.ExpV()) {
              bot = test;
            }
            else { // (answer[test].ExpV() > next.ExpV())
              top = test;
            }
          }

          if (bot == top) {
            answer[bot] += next;
          }
          else {
            answer.insert(std::next(answer.begin(), top - 1), next);
          }
        }
      }
    }
  }
  return answer;
}

template <class T> gPoly<T> gPoly<T>::DivideByPolynomial(const gPoly<T> &den) const
{
  gPoly<T> zero(Space, static_cast<T>(0));

  if (den == zero) {
    throw ZeroDivideException();
  }
  // assumes exact divisibility!

  gPoly<T> result = zero;

  if (*this == zero) {
    return result;
  }
  else if (den.Degree() == 0) {
    result = *this / den.NumLeadCoeff();
    return result;
  }
  else {
    int last = Dmnsn();
    while (den.DegreeOfVar(last) == 0) {
      last--;
    }

    gPoly<T> remainder = *this;

    while (remainder != zero) {
      gPoly<T> quot = remainder.LeadingCoefficient(last) / den.LeadingCoefficient(last);
      gPoly<T> power_of_last(Space, last, remainder.DegreeOfVar(last) - den.DegreeOfVar(last));
      result += quot * power_of_last;
      remainder -= quot * power_of_last * den;
    }
  }
  return result;
}

template <class T> gPoly<T> gPoly<T>::PartialDerivative(int varnumber) const
{
  gPoly<T> newPoly(*this);

  for (int i = 1; i <= newPoly.Terms.size(); i++) {
    newPoly.Terms[i] = gMono<T>(newPoly.Terms[i].Coef() * (T)newPoly.Terms[i].ExpV()[varnumber],
                                newPoly.Terms[i].ExpV().WithZeroExponent(varnumber));
  }

  int j = 1;
  while (j <= newPoly.Terms.size()) {
    if (newPoly.Terms[j].Coef() == static_cast<T>(0)) {
      newPoly.Terms.erase(std::next(newPoly.Terms.begin(), j - 1));
    }
    else {
      j++;
    }
  }

  return newPoly;
}

template <class T> gPoly<T> gPoly<T>::LeadingCoefficient(int varnumber) const
{
  gPoly<T> newPoly(*this);
  int degree = DegreeOfVar(varnumber);
  newPoly.Terms = List<gMono<T>>();
  for (int j = 1; j <= Terms.size(); j++) {
    if (Terms[j].ExpV()[varnumber] == degree) {
      newPoly.Terms.push_back(
          gMono<T>(Terms[j].Coef(), Terms[j].ExpV().WithZeroExponent(varnumber)));
    }
  }
  return newPoly;
}

template <class T>
gPoly<T> gPoly<T>::TranslateOfMono(const gMono<T> &m, const Vector<T> &new_origin) const
{
  gPoly<T> answer(GetSpace(), static_cast<T>(1));
  for (int i = 1; i <= Dmnsn(); i++) {
    if (m.ExpV()[i] > 0) {
      gPoly<T> lt(GetSpace(), i, 1);
      lt += gPoly<T>(GetSpace(), new_origin[i]);
      for (int j = 1; j <= m.ExpV()[i]; j++) {
        answer *= lt;
      }
    }
  }
  answer *= m.Coef();
  return answer;
}

template <class T> gPoly<T> gPoly<T>::TranslateOfPoly(const Vector<T> &new_origin) const
{
  gPoly<T> answer(GetSpace());
  for (int i = 1; i <= this->MonomialList().size(); i++) {
    answer += TranslateOfMono(this->MonomialList()[i], new_origin);
  }
  return answer;
}

template <class T>
gPoly<T> gPoly<T>::MonoInNewCoordinates(const gMono<T> &m, const SquareMatrix<T> &M) const
{
  gPoly<T> answer(Space, static_cast<T>(1));

  for (int i = 1; i <= Dmnsn(); i++) {
    if (m.ExpV()[i] > 0) {
      gPoly<T> linearform(Space, static_cast<T>(0));
      for (int j = 1; j <= Dmnsn(); j++) {
        ExponentVector exps(GetSpace(), j, 1);
        linearform += gPoly<T>(GetSpace(), exps, M(i, j));
      }
      for (int k = 1; k <= m.ExpV()[i]; k++) {
        answer *= linearform;
      }
    }
  }
  answer *= m.Coef();
  return answer;
}

template <class T> gPoly<T> gPoly<T>::PolyInNewCoordinates(const SquareMatrix<T> &M) const
{
  gPoly<T> answer(Space);
  for (const auto &term : Terms) {
    answer += MonoInNewCoordinates(term, M);
  }
  return answer;
}

template <class T> T gPoly<T>::MaximalValueOfNonlinearPart(const T &radius) const
{
  T maxcon = static_cast<T>(0);
  for (const auto &term : Terms) {
    if (term.TotalDegree() > 1) {
      maxcon += term.Coef() * pow(radius, term.TotalDegree());
    }
  }
  return maxcon;
}

template <class T> gPoly<T> gPoly<T>::Normalize() const
{
  auto maxcoeff =
      std::max_element(Terms.begin(), Terms.end(),
                       [](const gMono<T> &a, const gMono<T> &b) { return a.Coef() < b.Coef(); });
  if (maxcoeff->Coef() < static_cast<T>(0.000000001)) {
    return *this;
  }
  return *this / maxcoeff->Coef();
}
