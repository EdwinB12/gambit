//
// This file is part of Gambit
// Copyright (c) 1994-2024, The Gambit Project (http://www.gambit-project.org)
//
// FILE: src/tools/enumpoly/quiksolv.imp
// Implementation of quick-solver classes
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//

#include "quiksolv.h"

//---------------------------------------------------------------
//                      class: QuikSolv
//---------------------------------------------------------------

//---------------------------
// Constructors / Destructors
//---------------------------

using namespace Gambit;

template <class T>
QuikSolv<T>::QuikSolv(const gPolyList<T> &given)
  : System(given), gDoubleSystem(given.AmbientSpace(), given.NormalizedList()),
    NoEquations(std::min(System.Dmnsn(), System.Length())),
    NoInequalities(std::max(System.Length() - System.Dmnsn(), 0)), TreesOfPartials(gDoubleSystem),
    HasBeenSolved(false), Roots(), isMultiaffine(System.IsMultiaffine()),
    Equation_i_uses_var_j(Eq_i_Uses_j())
{
}

template <class T>
QuikSolv<T>::QuikSolv(const QuikSolv &qs)
  : System(qs.System), gDoubleSystem(qs.gDoubleSystem), NoEquations(qs.NoEquations),
    NoInequalities(qs.NoEquations), TreesOfPartials(qs.TreesOfPartials),
    HasBeenSolved(qs.HasBeenSolved), Roots(qs.Roots), isMultiaffine(qs.isMultiaffine),
    Equation_i_uses_var_j(qs.Equation_i_uses_var_j)

{
}

//-------------------------------------------------------
//      Supporting Calculations for the Constructors
//-------------------------------------------------------

template <class T> Gambit::RectArray<bool> QuikSolv<T>::Eq_i_Uses_j() const
{
  Gambit::RectArray<bool> answer(System.Length(), Dmnsn());
  for (int i = 1; i <= System.Length(); i++) {
    for (int j = 1; j <= Dmnsn(); j++) {
      if (System[i].DegreeOfVar(j) > 0) {
        answer(i, j) = true;
      }
      else {
        answer(i, j) = false;
      }
    }
  }
  return answer;
}

//---------------------------
// Is a root impossible?
//---------------------------

template <class T>
bool QuikSolv<T>::SystemHasNoRootsIn(const gRectangle<double> &r,
                                     Gambit::Array<int> &precedence) const
{
  for (int i = 1; i <= System.Length(); i++) {

    if ((precedence[i] <= NoEquations && TreesOfPartials[precedence[i]].PolyHasNoRootsIn(r)) ||
        (precedence[i] > NoEquations &&
         TreesOfPartials[precedence[i]].PolyEverywhereNegativeIn(r))) {
      if (i != 1) { // We have found a new "most likely to never vanish"
        int tmp = precedence[i];
        for (int j = 1; j <= i - 1; j++) {
          precedence[i - j + 1] = precedence[i - j];
        }
        precedence[1] = tmp;
      }
      return true;
    }
  }
  return false;
}

//--------------------------------------
// Does Newton's method lead to a root?
//--------------------------------------

//
// In NewtonRootInRectangle(), problems with infinite looping will occur
// due to roundoff in trying to compare to the zero vector.
// The fuzzy_equals() functions below alleviate this by introducing
// an epsilon fudge-factor.  This fudge-factor, and indeed the entire
// implementation, is largely ad-hoc, but appears to work for most
// applications.
//
// The fuzzy_equals() function used to be implemented as operator==
// for the type gDouble in previous versions; indeed, it was the
// raison d'etre for that class' existence.  As such, it is possible
// that this technique may be useful elsewhere where gDouble used to
// be used.
//

static bool fuzzy_equals(double x, double y)
{
  const double epsilon = 0.000000001;

  if (x == 0) {
    return (fabs(y) < epsilon);
  }
  else if (y == 0) {
    return (fabs(x) < epsilon);
  }
  else {
    return ((fabs(x - y) / (fabs(x) + fabs(y)) < epsilon) ||
            (fabs(x) < epsilon && fabs(y) < epsilon));
  }
}

static bool fuzzy_equals(const Gambit::Vector<double> &x, const Gambit::Vector<double> &y)
{
  for (int i = x.First(); i <= x.Last(); i++) {
    if (!fuzzy_equals(x[i], y[i])) {
      return false;
    }
  }
  return true;
}

template <class T>
bool QuikSolv<T>::NewtonRootInRectangle(const gRectangle<double> &r,
                                        Gambit::Vector<double> &point) const
{
  // assert (NoEquations == System.Dmnsn());

  Gambit::Vector<double> zero(Dmnsn());
  for (int i = 1; i <= Dmnsn(); i++) {
    zero[i] = (double)0;
  }

  Gambit::Vector<double> oldevals = TreesOfPartials.ValuesOfRootPolys(point, NoEquations);

  if (fuzzy_equals(oldevals, zero)) {
    return r.Contains(point);
  }

  gRectangle<double> bigr = r.SameCenterDoubleSideLengths();

  Gambit::Vector<double> newpoint(Dmnsn());

  while (true) {
    try {
      newpoint = NewtonPolishOnce(point);
    }
    catch (Gambit::SingularMatrixException &) {
      bool nonsingular = false;
      int direction = 1;
      while (direction < Dmnsn() && !nonsingular) {
        Gambit::Vector<double> perturbed_point(point);
        if (r.UpperBoundOfCoord(direction) > point[direction]) {
          perturbed_point[direction] += (r.UpperBoundOfCoord(direction) - point[direction]) / 10;
        }
        else {
          perturbed_point[direction] += (r.LowerBoundOfCoord(direction) - point[direction]) / 10;
        }
        nonsingular = true;

        try {
          newpoint = point + (NewtonPolishOnce(perturbed_point) - perturbed_point);
        }
        catch (Gambit::SingularMatrixException &) {
          nonsingular = false;
        }
        direction++;
      }
      if (!nonsingular) {
        Gambit::Vector<double> perturbed_point(point);
        if (r.UpperBoundOfCoord(direction) > point[direction]) {
          perturbed_point[direction] += (r.UpperBoundOfCoord(direction) - point[direction]) / 10;
        }
        else {
          perturbed_point[direction] += (r.LowerBoundOfCoord(direction) - point[direction]) / 10;
        }
        newpoint = point + (NewtonPolishOnce(perturbed_point) - perturbed_point);
      }
    }

    if (!bigr.Contains(newpoint)) {
      return false;
    }
    point = newpoint;

    Gambit::Vector<double> newevals = TreesOfPartials.ValuesOfRootPolys(point, NoEquations);
    if (newevals * newevals >= oldevals * oldevals) {
      return false;
    }
    if (fuzzy_equals(newevals, zero)) {
      if (r.Contains(point)) {
        point = SlowNewtonPolishOnce(point);
        point = SlowNewtonPolishOnce(point);
        return true;
      }
      else {
        return false;
      }
    }

    oldevals = newevals;
  }
  return false;
}

//------------------------------------
// Is the Newton root the only root?
//------------------------------------

template <class T>
double QuikSolv<T>::MaxDistanceFromPointToVertexAfterTransformation(
    const gRectangle<double> &r, const Gambit::Vector<double> &p,
    const Gambit::SquareMatrix<double> &M) const
{
  // A very early implementation of this method used a type gDouble which
  // implemented fuzzy comparisons.  Adding the epsilon parameter here is
  // important for the case when a solution may be found on the boundary
  // of the rectangle but be slightly outside due to numerical error.
  if (!r.Contains(p, T(1.0e-8))) {
    throw Gambit::AssertionException(
        "Point not in rectangle in MaxDistanceFromPointToVertexAfterTransformation.");
  }
  auto max = (double)0;

  Gambit::Array<int> ListOfTwos(Dmnsn());
  for (int i = 1; i <= Dmnsn(); i++) {
    ListOfTwos[i] = 2;
  }
  gIndexOdometer ListOfTopBottoms(ListOfTwos);

  while (ListOfTopBottoms.Turn()) {
    Gambit::Vector<double> diffs(Dmnsn());
    for (int i = 1; i <= Dmnsn(); i++) {
      if (ListOfTopBottoms[i] == 2) {
        diffs[i] = r.CartesianFactor(i).UpperBound() - p[i];
      }
      else {
        diffs[i] = p[i] - r.CartesianFactor(i).LowerBound();
      }
    }
    Gambit::Vector<double> new_diffs = M * diffs;
    double squared_length = new_diffs * new_diffs;
    if (max < squared_length) {
      max = squared_length;
    }
  }

  return sqrt((double)max);
}

template <class T>
bool QuikSolv<T>::HasNoOtherRootsIn(const gRectangle<double> &r, const Gambit::Vector<double> &p,
                                    const Gambit::SquareMatrix<double> &M) const
{
  // assert (NoEquations == System.Dmnsn());
  gPolyList<double> system1 = gDoubleSystem.TranslateOfSystem(p);
  gPolyList<double> system2 = system1.SystemInNewCoordinates(M);
  double radius = MaxDistanceFromPointToVertexAfterTransformation(r, p, M);
  auto max = (double)0;
  for (int i = 1; i <= Dmnsn(); i++) {
    max += system2[i].MaximalValueOfNonlinearPart(radius);
  }

  if (max >= radius) {
    return false;
  }
  else {
    return true;
  }
}

//--------------------------------------------
// Does Newton's method yield a unique root?
//--------------------------------------------

template <class T>
bool QuikSolv<T>::NewtonRootIsOnlyInRct(const gRectangle<double> &r,
                                        Gambit::Vector<double> &point) const
{
  // assert (NoEquations == System.Dmnsn());

  if (NewtonRootInRectangle(r, point)) {
    Gambit::SquareMatrix<double> Df = TreesOfPartials.SquareDerivativeMatrix(point);
    if (HasNoOtherRootsIn(r, point, Df.Inverse())) {
      return true;
    }
    else {
      return false;
    }
  }
  else {
    return false;
  }
}

//----------------------------------
//        Operators
//----------------------------------

template <class T> QuikSolv<T> &QuikSolv<T>::operator=(const QuikSolv<T> &rhs)
{
  // assert (System == rhs.System);

  if (*this != rhs) {
    HasBeenSolved = rhs.HasBeenSolved;
    Roots = rhs.Roots;
  }
  return *this;
}

template <class T> bool QuikSolv<T>::operator==(const QuikSolv<T> &rhs) const
{
  if (System != rhs.System || HasBeenSolved != rhs.HasBeenSolved || Roots != rhs.Roots) {
    return false;
  }
  else {
    return true;
  }
}

template <class T> bool QuikSolv<T>::operator!=(const QuikSolv<T> &rhs) const
{
  return !(*this == rhs);
}

//-------------------------------------------
//          Improve Accuracy of Root
//-------------------------------------------

template <class T>
Gambit::Vector<double> QuikSolv<T>::NewtonPolishOnce(const Gambit::Vector<double> &point) const
{
  Gambit::Vector<double> oldevals = TreesOfPartials.ValuesOfRootPolys(point, NoEquations);
  Gambit::Matrix<double> Df = TreesOfPartials.DerivativeMatrix(point, NoEquations);
  Gambit::SquareMatrix<double> M(Df * Df.Transpose());

  Gambit::Vector<double> Del = -(Df.Transpose() * M.Inverse()) * oldevals;

  return point + Del;
}

template <class T>
Gambit::Vector<double> QuikSolv<T>::SlowNewtonPolishOnce(const Gambit::Vector<double> &point) const
{
  Gambit::Vector<double> oldevals = TreesOfPartials.ValuesOfRootPolys(point, NoEquations);
  Gambit::Matrix<double> Df = TreesOfPartials.DerivativeMatrix(point, NoEquations);
  Gambit::SquareMatrix<double> M(Df * Df.Transpose());

  Gambit::Vector<double> Del = -(Df.Transpose() * M.Inverse()) * oldevals;

  bool done = false;
  while (!done) {
    Gambit::Vector<double> newevals(TreesOfPartials.ValuesOfRootPolys(point + Del, NoEquations));
    if (newevals * newevals <= oldevals * oldevals) {
      done = true;
    }
    else {
      for (int i = 1; i <= Del.Length(); i++) {
        Del[i] /= 2;
      }
    }
  }

  return point + Del;
}

//-------------------------------------------
//           The Central Calculation
//-------------------------------------------

template <class T>
bool QuikSolv<T>::FindCertainNumberOfRoots(const gRectangle<T> &r, const int &max_iterations,
                                           const int &max_no_roots)
{
  auto *rootlistptr = new Gambit::List<Gambit::Vector<double>>();

  if (NoEquations == 0) {
    Gambit::Vector<double> answer(0);
    rootlistptr->push_back(answer);
    Roots = *rootlistptr;
    HasBeenSolved = true;
    return true;
  }

  Gambit::Array<int> precedence(System.Length());
  // Orders search for nonvanishing poly
  for (int i = 1; i <= System.Length(); i++) {
    precedence[i] = i;
  }

  int iterations = 0;

  int *no_found = new int(0);
  FindRootsRecursion(rootlistptr, TogDouble(r), max_iterations, precedence, iterations, 1,
                     max_no_roots, no_found);

  if (iterations < max_iterations) {
    Roots = *rootlistptr;
    HasBeenSolved = true;
    return true;
  }

  return false;
}

template <class T>
void QuikSolv<T>::FindRootsRecursion(Gambit::List<Gambit::Vector<double>> *rootlistptr,
                                     const gRectangle<double> &r, const int &max_iterations,
                                     Gambit::Array<int> &precedence, int &iterations, int depth,
                                     const int &max_no_roots, int *roots_found) const
{
  //
  // TLT: In some cases, this recursive process apparently goes into an
  // infinite regress.  I'm not able to identify just why this occurs,
  // but as at least a temporary safeguard, we will limit the maximum depth
  // of this recursive search.
  //
  // This limit has been chosen only because it doesn't look like any
  // "serious" search (i.e., one that actually terminates with a result)
  // will take more than a depth of 32.
  //
  const int MAX_DEPTH = 32;

  if (SystemHasNoRootsIn(r, precedence)) {
    return;
  }

  Gambit::Vector<double> point = r.Center();

  if (NewtonRootIsOnlyInRct(r, point)) {
    int i;
    for (i = NoEquations + 1; i <= System.Length(); i++) {
      if (TreesOfPartials[i].ValueOfRootPoly(point) < (double)0) {
        return;
      }
    }

    bool already_found = false;
    for (i = 1; i <= rootlistptr->size(); i++) {
      if (fuzzy_equals(point, (*rootlistptr)[i])) {
        already_found = true;
      }
    }
    if (!already_found) {
      rootlistptr->push_back(point);
      (*roots_found)++;
    }
    return;
  }

  int N = r.NumberOfCellsInSubdivision();
  for (int i = 1; i <= N; i++) {
    if (max_no_roots == 0 || *roots_found < max_no_roots) {
      if (iterations >= max_iterations || depth == MAX_DEPTH) {
        return;
      }
      else {
        iterations++;
        FindRootsRecursion(rootlistptr, r.SubdivisionCell(i), max_iterations, precedence,
                           iterations, depth + 1, max_no_roots, roots_found);
      }
    }
  }
}
