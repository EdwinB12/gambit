//
// This file is part of Gambit
// Copyright (c) 1994-2024, The Gambit Project (http://www.gambit-project.org)
//
// FILE: src/tools/enumpoly/gpolylst.imp
// Implementation of polynomial list type
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation; either version 2 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
//

#include "gpolylst.h"

template <class T>
Gambit::List<T> InteriorSegment(const Gambit::List<T> &p_list, int first, int last)
{
  Gambit::List<T> answer;

  for (int i = first; i <= last; i++) {
    answer.push_back(p_list[i]);
  }

  return answer;
}

//---------------------------------------------------------------
//                      gPolyList
//---------------------------------------------------------------

//---------------------------
// Constructors / Destructors
//---------------------------

template <class T>
gPolyList<T>::gPolyList(const VariableSpace *sp, const Gambit::List<gPoly<T> *> &plist) : Space(sp)
{
  for (int ii = 1; ii <= plist.size(); ii++) {
    auto *temp = new gPoly<T>(*plist[ii]);
    List.push_back(temp);
  }
}

template <class T>
gPolyList<T>::gPolyList(const VariableSpace *sp, const Gambit::List<gPoly<T>> &list) : Space(sp)
{
  for (int ii = 1; ii <= list.size(); ii++) {
    auto *temp = new gPoly<T>(list[ii]);
    List.push_back(temp);
  }
}

template <class T> gPolyList<T>::gPolyList(const gPolyList<T> &lst) : Space(lst.Space)
{
  for (int ii = 1; ii <= lst.List.size(); ii++) {
    auto *temp = new gPoly<T>(*(lst.List[ii]));
    List.push_back(temp);
  }
}

template <class T> gPolyList<T>::~gPolyList()
{
  for (int ii = 1; ii <= List.size(); ii++) {
    delete List[ii];
  }
}

//----------------------------------
//        Operators
//----------------------------------

template <class T> gPolyList<T> &gPolyList<T>::operator=(const gPolyList<T> &rhs)
{
  if (*this != rhs) {
    for (int ii = List.size(); ii >= 1; ii--) {
      delete List[ii];
      List.erase(std::next(List.begin(), ii - 1));
    }

    for (int ii = 1; ii <= rhs.List.size(); ii++) {
      auto *temp = new gPoly<T>(*(rhs.List[ii]));
      List.push_back(temp);
    }
  }
  return *this;
}

template <class T> bool gPolyList<T>::operator==(const gPolyList<T> &rhs) const
{
  if (Space != rhs.Space) {
    return false;
  }
  if (List.size() != rhs.List.size()) {
    return false;
  }
  for (int j = 1; j <= List.size(); j++) {
    if (*List[j] != *(rhs.List[j])) {
      return false;
    }
  }
  return true;
}

template <class T> void gPolyList<T>::operator+=(const gPoly<T> &new_poly)
{
  auto *temp = new gPoly<T>(new_poly);
  List.push_back(temp);
}

template <class T> void gPolyList<T>::operator+=(const gPolyList<T> &new_list)
{
  for (int i = 1; i <= new_list.Length(); i++) {
    List.push_back(new gPoly<T>(new_list[i]));
  }
}

//------------------------------------------
//           New Coordinate Systems
//------------------------------------------

template <class T>
gPolyList<T> gPolyList<T>::TranslateOfSystem(const Gambit::Vector<T> &new_origin) const
{
  Gambit::List<gPoly<T>> new_polys;
  for (int i = 1; i <= Length(); i++) {
    new_polys.push_back((*this)[i].TranslateOfPoly(new_origin));
  }
  return gPolyList<T>(AmbientSpace(), new_polys);
}

template <class T>
gPolyList<T> gPolyList<T>::SystemInNewCoordinates(const Gambit::SquareMatrix<T> &M) const
{
  Gambit::List<gPoly<T>> new_polys;
  for (int i = 1; i <= Length(); i++) {
    new_polys.push_back((*this)[i].PolyInNewCoordinates(M));
  }
  return gPolyList<T>(AmbientSpace(), new_polys);
}

//----------------------------------
//           Information
//----------------------------------

template <class T> bool gPolyList<T>::IsMultiaffine() const
{
  for (const auto &v : List) {
    if (!(*v).IsMultiaffine()) {
      return false;
    }
  }
  return true;
}

template <class T> Gambit::Vector<T> gPolyList<T>::Evaluate(const Gambit::Vector<T> &v) const
{
  Gambit::Vector<T> answer(Length());
  for (int ii = 1; ii <= List.size(); ii++) {
    answer[ii] = List[ii]->Evaluate(v);
  }

  return answer;
}

template <class T> Gambit::List<gPoly<double>> gPolyList<T>::NormalizedList() const
{
  Gambit::List<gPoly<double>> newlist;
  for (const auto &v : List) {
    newlist.push_back(v->Normalize());
  }
  return newlist;
}
